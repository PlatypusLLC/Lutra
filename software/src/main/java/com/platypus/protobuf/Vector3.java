// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ././platypus.proto
package com.platypus.protobuf;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.DOUBLE;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class Vector3 extends Message {

  public static final Double DEFAULT_X = 0D;
  public static final Double DEFAULT_Y = 0D;
  public static final Double DEFAULT_Z = 0D;
  public static final Double DEFAULT_W = 0D;

  @ProtoField(tag = 1, type = DOUBLE, label = REQUIRED)
  public final Double x;

  @ProtoField(tag = 2, type = DOUBLE, label = REQUIRED)
  public final Double y;

  @ProtoField(tag = 3, type = DOUBLE, label = REQUIRED)
  public final Double z;

  @ProtoField(tag = 4, type = DOUBLE)
  public final Double w;

  private Vector3(Builder builder) {
    super(builder);
    this.x = builder.x;
    this.y = builder.y;
    this.z = builder.z;
    this.w = builder.w;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Vector3)) return false;
    Vector3 o = (Vector3) other;
    return equals(x, o.x)
        && equals(y, o.y)
        && equals(z, o.z)
        && equals(w, o.w);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = x != null ? x.hashCode() : 0;
      result = result * 37 + (y != null ? y.hashCode() : 0);
      result = result * 37 + (z != null ? z.hashCode() : 0);
      result = result * 37 + (w != null ? w.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Vector3> {

    public Double x;
    public Double y;
    public Double z;
    public Double w;

    public Builder() {
    }

    public Builder(Vector3 message) {
      super(message);
      if (message == null) return;
      this.x = message.x;
      this.y = message.y;
      this.z = message.z;
      this.w = message.w;
    }

    public Builder x(Double x) {
      this.x = x;
      return this;
    }

    public Builder y(Double y) {
      this.y = y;
      return this;
    }

    public Builder z(Double z) {
      this.z = z;
      return this;
    }

    public Builder w(Double w) {
      this.w = w;
      return this;
    }

    @Override
    public Vector3 build() {
      checkRequiredFields();
      return new Vector3(this);
    }
  }
}
