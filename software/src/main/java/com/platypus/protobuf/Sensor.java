// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ././platypus.proto
package com.platypus.protobuf;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.DOUBLE;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REPEATED;

public final class Sensor extends Message {

  public static final String DEFAULT_TYPE = "";
  public static final Integer DEFAULT_CHANNEL = 0;
  public static final List<Double> DEFAULT_DATA = Collections.emptyList();

  @ProtoField(tag = 1, type = STRING)
  public final String type;

  @ProtoField(tag = 2, type = UINT32)
  public final Integer channel;

  @ProtoField(tag = 3, type = DOUBLE, label = REPEATED)
  public final List<Double> data;

  private Sensor(Builder builder) {
    super(builder);
    this.type = builder.type;
    this.channel = builder.channel;
    this.data = immutableCopyOf(builder.data);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Sensor)) return false;
    Sensor o = (Sensor) other;
    return equals(type, o.type)
        && equals(channel, o.channel)
        && equals(data, o.data);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = type != null ? type.hashCode() : 0;
      result = result * 37 + (channel != null ? channel.hashCode() : 0);
      result = result * 37 + (data != null ? data.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Sensor> {

    public String type;
    public Integer channel;
    public List<Double> data;

    public Builder() {
    }

    public Builder(Sensor message) {
      super(message);
      if (message == null) return;
      this.type = message.type;
      this.channel = message.channel;
      this.data = copyOf(message.data);
    }

    public Builder type(String type) {
      this.type = type;
      return this;
    }

    public Builder channel(Integer channel) {
      this.channel = channel;
      return this;
    }

    public Builder data(List<Double> data) {
      this.data = data;
      return this;
    }

    @Override
    public Sensor build() {
      return new Sensor(this);
    }
  }
}
