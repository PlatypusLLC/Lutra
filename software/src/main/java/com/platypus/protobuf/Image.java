// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ././platypus.proto
package com.platypus.protobuf;

import com.squareup.wire.ByteString;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.UINT32;

public final class Image extends Message {

  public static final ByteString DEFAULT_DATA = ByteString.EMPTY;
  public static final Integer DEFAULT_WIDTH = 0;
  public static final Integer DEFAULT_HEIGHT = 0;

  @ProtoField(tag = 1, type = BYTES)
  public final ByteString data;

  @ProtoField(tag = 2, type = UINT32)
  public final Integer width;

  @ProtoField(tag = 3, type = UINT32)
  public final Integer height;

  private Image(Builder builder) {
    super(builder);
    this.data = builder.data;
    this.width = builder.width;
    this.height = builder.height;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Image)) return false;
    Image o = (Image) other;
    return equals(data, o.data)
        && equals(width, o.width)
        && equals(height, o.height);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = data != null ? data.hashCode() : 0;
      result = result * 37 + (width != null ? width.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Image> {

    public ByteString data;
    public Integer width;
    public Integer height;

    public Builder() {
    }

    public Builder(Image message) {
      super(message);
      if (message == null) return;
      this.data = message.data;
      this.width = message.width;
      this.height = message.height;
    }

    public Builder data(ByteString data) {
      this.data = data;
      return this;
    }

    public Builder width(Integer width) {
      this.width = width;
      return this;
    }

    public Builder height(Integer height) {
      this.height = height;
      return this;
    }

    @Override
    public Image build() {
      return new Image(this);
    }
  }
}
